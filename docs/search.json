[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Vikrant",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nMoney Map\n\n\nMoney Map is a financial tool that lets you run simulations with different inputs and get an approximation of your financial plans.\n\n\n\nOct 18, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/meeting-bhavesh-bhatia/index.html",
    "href": "posts/meeting-bhavesh-bhatia/index.html",
    "title": "A Visionary Leader",
    "section": "",
    "text": "Background\nDad, a schizophrenic, with a minuscule salary of ₹700 per month; mom, a cancer patient; elder brother, deceased from a dog bite reaction; home at a place which was dominated by Naxalite activities, Gondia. With this as his background, came the light of the Bhatia family—Bhavesh.\n Photo With Bhavesh Bhatia\n\n\nHis Story\nBhavesh’s childhood was a continuous struggle. Yet, he had a hankering for adventures.\n\n“मुझे adventures पसंद है। (I love adventures.) In the 8th grade, I made a friend who had an amputated leg. After finishing our 10th grade, we made a trip from our hometown to Kathmandu, Nepal—a distance of 5,620 km—on a bicycle. I had to do the pedalling. He had to do the handling.”\n\nAnd together, they managed their ride. The trip was to make an identity of his own, to prove himself to the world. He did prove himself. He was welcomed like a hero in his hometown.\n\n“गाँवसे २०-३० km बाहर, ४००-५०० लोग welcome करने आए थे। (There were 400-500 people outside my town to welcome me.)”\n\nBut the euphoria of success didn’t last long.\nSoon after returning, his mother was taken seriously ill with stage IV blood cancer.\n\n“घर, ज़मीन, जो भी बचाया था, सब बेच दिया। दोस्तों, रिश्तेदारों से जितना हो सके उतना क़र्ज़ा लिया। (We sold everything we had and took out as much loan as we could for her treatment.) But fate operates on her own accord. We lost her, regardless of our efforts.”\n\nBereft of a great loving support, left alone with a relapsed dad, he was now an unemployed double graduate. This is how Bhavesh’s life stood in the early 1990s.\n\n“माँ चली गयी, पर मैं और daddy बिल्कुल footpath पर आ गए। (Mom left us, but me and dad were on the streets.)”\n\n“I had a master’s degree in Psychology and Economics, yet I was without a job. To be honest, I didn’t want to do a job; I wanted to do business. But what business could I do back then? There was none. I had to find a job. I worked as a telephone operator for a while, 18-20 hours a day for a handful of coins. Later, I got trained as a massage therapist. In fact, I was awarded ‘The Best Massage Therapist in Maharashtra’ award. I worked day and night; I worked till my hands were swollen and somehow managed to save ₹5,000.”\nThese hard-earned ₹5,000 were put to the best use possible.\nBhavesh learned a skill—candle making—a skill that would transform his life. With the ₹5,000, he bought 20 kg of wax and a simple candle die for raw material. Thus, he embarked on his dream of starting a business. His manufacturing unit? A single wooden table. His retail store? A rented handcart. The name registered—Sunrise Candles. The year was 1994 and the place, Mahabaleshwar.\n\n“Back in the day, candles worth thousands of crores were imported from countries like China. Even today, the scenario hasn’t changed much. It was obvious that there was a tremendous opportunity in the candle business, especially in the ‘fancy’ candle business. And Mahabaleshwar, being a tourist destination, played to my advantage.”\n\nBhavesh’s mornings became reserved for manufacturing candles and his evenings, for selling them. He started with plain candles but soon, he was designing fancy candles. Within the first few years, he had created thousands of beautiful designs.\n\n“People used to come to my handcart and fall in love with what I was doing. They would buy a few candles, and then send more people to my handcart. On my handcart came tourists who were specialists in business. They helped me with marketing, packaging, sales, and whatnot. The business grew in this way.”\n\nYet, there was the sword of debt hanging over his head.\n\n“We knew that if we wanted to expand, we had to reach outside Mahabaleshwar. So we started taking part in exhibitions. At one such exhibition, there came a couple who worked at Infosys. It was their wedding anniversary. I gave them a small gift from my side. They were so impressed that they invited me to stay at Infosys for three days and mailed all the 25,000 employees of Infosys to encourage them to buy my products.”\n\nIt’s miraculous what a small act of kindness can do. A ₹60 gift brought in a business of ₹23 lakhs. The whole debt was paid off, with interest.\nBy now, Bhavesh was employing about 30 people. The production was now far exceeding the selling capacity of a handcart. He had to find more places to sell his candles. Again, the tourism value of Mahabaleshwar came to the rescue.\n\n“A few hoteliers were now willing to put up a small selling unit of ours at their hotels. By now, even we’d understood where we should sell the candles, you know, tourist places and such. We put up our stall wherever we got the opportunity and the whole ownership of the stall was given to the guy running it. We could expand even more in this way. More than a thousand corporates are now associated with us including the Taj Group and Grand Hyatt Group.”\n\nHis business now ran smoothly. Yet, the hunger for adventures wouldn’t let him sit still. He took up mountaineering.\n\n“अगर आपको कभी trekking वगैरे करना हो, तो आओ हमारे साथ। (If you want to go on a trek, join us.) I have just finished climbing Kilimanjaro, and my dream is to climb Mount Everest. It’s, like, a real bucket list item.”\n\nWith an annual turnover of more than ₹200 crores, Bhavesh’s company, Sunrise Candles, enlightens more than 70 countries across the globe. It employs more than 10,000 people all over India at its 71 manufacturing units and more than 4,500 selling units.\nGood story, eh? But what is the big deal about Bhavesh Bhatia?\nThe big deal is that he is totally blind.\nBhavesh finished his double degree with the help of his mother who read all his books to him. The institute where he learned candle making was, in fact, the National Association for the Blind, Mumbai (NAB).\nHe was awarded the national award at the hands of the President of India, twice, out of which, one was for being the best employer in the country, which was the best among 58,000 nominations. Out of the 10,000 people he employs, about 9,500 people are blind.\nHe has won a staggering 114 medals in national Paralympics, and still competes for more. As if that wasn’t enough, he became the first-ever blind person to climb Mount Kilimanjaro and aspires to be the first blind person to climb Mount Everest.\nAnd that is a pretty big deal!\n\n\n\nAdvice to the Youth:\n\n“Never tell your destinations where your problems are. Tell your problems where your destinations are.”\n“Success is nothing but being able to sleep well at night. Do whatever you want but never do anything that’ll take away your night’s good sleep.”\n“And don’t wait. Each day is the best day to start doing what you want to do. Just start doing it.”\n\n\nBhavesh sees the world in a way none of us can see. He has a uniquely different perspective on life, a perspective that sits at the far end of the positivity spectrum—something we can emulate. Here’s a story he shared with me that illustrates my point:\n\n“The turning point of my life came when Baba Ramdev hosted a huge shibir of 40-50,000 people in Mahabaleshwar.”\n\n\n“I went there with my friend to see if I could get a cure to my mother’s illness and also, my own. Baba Ramdev was tired telling all these people, “आँखे बंद करो और अंदर झाँको। आँखे बंद करो और अंदर झाँको।” (Close your eyes and peek within, close your eyes and peek within.) Then, I heard an inner voice. It said that these people had to try to close their eyes, and even then, they were failing. And here I was, lucky to have been spared of the trouble. “Treatment तो नही मिला पर मेरा काम हो गया।” (I didn’t get a treatment to our illnesses but I got a cure for my problems.)”"
  },
  {
    "objectID": "posts/how-to-learn-dl/index.html",
    "href": "posts/how-to-learn-dl/index.html",
    "title": "Mastering Deep Learning as a Non-Techie",
    "section": "",
    "text": "Even if you closely follow AI and deep learning, chances are you haven’t heard of Radek Osmulski. He’s a deep learning engineer at Nvidia and a top competitor on Kaggle. But what’s really inspiring about Radek’s story is that he didn’t write a single line of code until he was 29! So how did he go from not knowing how to program to landing a job at Nvidia? How did he master deep learning so well? Radek answers these questions in his book, Meta Learning, which you can buy here.\nIn this blog post, I’ll summarize the key ideas from Meta Learning, so that even if you’re not a technical expert, you can get started and master deep learning yourself.\n\nThe Essential Skills\nYou might think deep learning requires advanced knowledge of statistics, algorithms, data structures, or calculus. But in reality, Radek argues that what you really need are these four skills:\n\nNavigating Stack Overflow: Get familiar with the interface, learn to navigate the site.\nReading documentation: Start with open-source projects—it’s intimidating at first, but it gets easier. By seeing how others code, you’ll improve your own. Take any open-source project in your preferred language and start exploring it.\nUnderstanding code repositories: No matter which one you use, editors have powerful features that make your life easy. Know them!\nUsing version control (Git): Nearly all of the world’s code is managed through Git, so learning how to use basic Git is extremely important. Get started here.\n\nIt sounds simple, right? None of these are deep learning-specific skills, but they are essential for implementing deep learning projects (or any software project, for that matter). If you have these skills, you can build on these to learn anything!\nYou can parallely take FastAI’s deep learning course as well to get familiar with Deep Learning. More on this later.\n\n\nShare Your Work\nYou learn best by doing, but even better by sharing. Sharing isn’t about showing off; it’s about reflecting. If, like me, you’re not someone who posts on social media often, this can be tough. But it’s worth breaking the barrier.\nSharing what you’re learning forces you to reflect, and reflection means deeper understanding. Start a blog, even if it’s just for yourself. Write about what you’re learning, then share it. Remember, you don’t have to be an expert to start writing a blog. Your journey as a beginner is just as important, especially for your own growth.\n\n\nBUILD. BUILD. BUILD.\nOne of the biggest barriers to learning deep learning is there’s just too much theory. You are told that you need to know statistics, calculus, and basic machine learning to just get started with deep learning. Radek’s advice is clear: stop focusing on theory, and start building. It’s better to build first and figure out the theory later. In his words, a better approach is: “Use one cup of theory, one cup of practice. Rinse and repeat.”\nDon’t overdo it with too many courses—pick one. By far, the best course on learning deep learning is the FastAI’s Deep Learning course. In fact, engineers at OpenAI are required to take this course before joining. You can start with this course, build the basics, and get your hands dirty!\n Meta Learning by Radek Osmulski\n\nI claim no credit for the information presented here. All insights are from Radek’s book. My goal was to present a small summary and to absorb the learnings better myself."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Vikrant",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nBuilding an HTTP Server From Scratch\n\n\n\n\n\n\nSoftware Engineering\n\n\n\nServing a web application is as simple as running a single command. But this hides a lot of details. In this post, we create an HTTP server from scratch in Python to peek under the hood.\n\n\n\n\n\nOct 27, 2024\n\n\n14 min\n\n\n\n\n\n\n\n\n\n\n\n\nBuilding a Digit Classifier From Scratch\n\n\n\n\n\n\nData Science\n\n\n\nIn this post, I’ll share how I created my first deep learning model. I created a neural network from scratch using FastAI and PyTorch. While I didn’t write code for backpropagation (thankfully, PyTorch is there!), I did write the building blocks myself, which made this incredibly fun!\n\n\n\n\n\nOct 23, 2024\n\n\n8 min\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge Accepted!\n\n\n\n\n\n\nBusiness\n\n\n\nThe incredible journey of Shashikant Parakh, the man who transformed NAMCO Hospital and built a legacy of success through relentless challenges. From business ventures to life lessons, his story is a testament to dreaming big and making a difference.\n\n\n\n\n\nOct 20, 2024\n\n\n5 min\n\n\n\n\n\n\n\n\n\n\n\n\nMastering Deep Learning as a Non-Techie\n\n\n\n\n\n\nData Science\n\n\nPsychology\n\n\n\nHow do you master deep learning, especially if you’re not a ‘techie’? Radek Osmulski did just this. He went from having a boring job to an exciting career at NVidia. This post tells you how.\n\n\n\n\n\nOct 18, 2024\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nA Visionary Leader\n\n\n\n\n\n\nBusiness\n\n\n\nBhavesh Bhatia’s story is nothing short of inspirational. He started with a rented handcart as a store, and built a business employing more than 10,000 people. Read on to know how he did it.\n\n\n\n\n\nOct 15, 2024\n\n\n7 min\n\n\n\n\n\n\n\n\n\n\n\n\nMastering Life Like a Grandmaster\n\n\n\n\n\n\nChess\n\n\nBooks\n\n\n\nVishy Anand, the five-time world champion, is a person who inspires many. His advice, like his chess, is well thought out and worth listening to. Recently, he published his book: “Mind Master: Winning Lessons from a Champion’s life”. Read on to find out what’s Vishy’s take on life.\n\n\n\n\n\nOct 13, 2024\n\n\n4 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Vikrant",
    "section": "",
    "text": "Hi, I’m Vikrant👋. I’m a final-year student at IIT Madras, pursuing a B.S. in Data Science and Applications. I currently work as a Teaching Assistant for the Data Structures and Algorithms (PDSA) course and as a Software Engineering intern at VuNet Systems in Bangalore.\nOutside of academics, I love sports, theatre, and finance. I play chess, tennis, and cricket. I’m an avid reader, and I write about what I read, projects I’m building, or my learning journey.\n\n\nEducation\nIndian Institute of Technology, Madras\nB.S. in Data Science | Sept 2021 - Sept 2025\nH.P.T. Arts College, Nashik\nB.A. in Psychology | June 2018 - June 2021\n\n\n\nExperience\nVuNet Systems, Bangalore\nSoftware Engineering Intern | Oct 2024 - Present\nIIT Madras, Chennai\nTeaching Assistant | June 2024 - Present"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Vikrant",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nBuilding a Digit Classifier From Scratch\n\n\n\n\n\n\nData Science\n\n\n\nIn this post, I’ll share how I created my first deep learning model. I created a neural network from scratch using FastAI and PyTorch. While I didn’t write code for backpropagation (thankfully, PyTorch is there!), I did write the building blocks myself, which made this incredibly fun!\n\n\n\n\n\nOct 23, 2024\n\n\n8 min\n\n\n\n\n\n\n\n\n\n\n\n\nMastering Deep Learning as a Non-Techie\n\n\n\n\n\n\nData Science\n\n\nPsychology\n\n\n\nHow do you master deep learning, especially if you’re not a ‘techie’? Radek Osmulski did just this. He went from having a boring job to an exciting career at NVidia. This post tells you how.\n\n\n\n\n\nOct 18, 2024\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nA Visionary Leader\n\n\n\n\n\n\nBusiness\n\n\n\nBhavesh Bhatia’s story is nothing short of inspirational. He started with a rented handcart as a store, and built a business employing more than 10,000 people. Read on to know how he did it.\n\n\n\n\n\nOct 15, 2024\n\n\n7 min\n\n\n\n\n\n\n\n\n\n\n\n\nMastering Life Like a Grandmaster\n\n\n\n\n\n\nChess\n\n\nBooks\n\n\n\nVishy Anand, the five-time world champion, is a person who inspires many. His advice, like his chess, is well thought out and worth listening to. Recently, he published his book: “Mind Master: Winning Lessons from a Champion’s life”. Read on to find out what’s Vishy’s take on life.\n\n\n\n\n\nOct 13, 2024\n\n\n4 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/first-project-using-fastai/index.html",
    "href": "posts/first-project-using-fastai/index.html",
    "title": "Building a Digit Classifier From Scratch",
    "section": "",
    "text": "This is my first time building a deep learning model from scratch. Before this, I had not tried it, and I wasn’t sure where to start. But thanks to Jeremy Howard’s Practical Deep Learning for Coders course, I gave it a shot and built my first deep learning model- a digit classifier. His course also encouraged me to share what I learn with others.\nIn this blog post, I’ll share how I built a simple neural network using FastAI and PyTorch. I’ll walk through how I prepared the data, built the model, and trained it. I hope my experience helps others who are also trying to build their first model.\n\nLoading the Training Dataset\nAlthough FastAI comes with the MNIST dataset, it needs to be loaded and prepared for training.\nThe data is in the URLs module in fastai library, and it has the following directory structure:\npath/\n├── training/\n│   ├── 0/\n│   │   ├── img1\n│   │   └── img2\n│   ├── 1/\n│   │   ├── img2\n│   │   └── img1\n├── testing/\n│   ├── 0/\n│   │   ├── img1\n│   │   └── img2\n│   ├── 1/\n│   │   ├── img1\n│   │   └── img2\nWe can write a few lines of code to load these images as tensors:\n\npath = untar_data(URLs.MNIST)\nPath.BASE_PATH = path\n\nx = [ ]\ny = [ ]\nfor i in range(10):\n    img_paths = (path/'training'/str(i)).ls()  # Get the image paths of a digit\n\n    # Load the images and convert to tensors\n    x.extend([tensor(Image.open(o)) for o in img_paths])\n\n    # Store the corresponding digit label for all images in this folder\n    y.extend([tensor(i)] * len(img_paths))\n\n\nData Preprocessing\nI now had a \\(28 \\times 28\\) matrix for each image. To pass this as input to the model, I needed to flatten it into a single tensor, and standardize the pixel values for better results.\n# Convert the python list into PyTorch tensor, and standardize it\nx_tensor = torch.stack(x).float()/255\ny_tensor = torch.tensor(y)\n\n# Each image is 28 * 28. So we flatten each image into a single flat tensor of size 784.\nflattened_x = x_tensor.view(-1, 28*28)\nflattened_y = y_tensor.unsqueeze(1) # y_tensor has shape [60000], we unsqueeze it to make it [60000, 1]\nIt’s always a good idea to split the dataset into training and validation sets:\nfrom fastai.data.transforms import RandomSplitter\n\nsplitter = RandomSplitter(valid_pct=0.2, seed=42)  # 80% training, 20% validation\n\ntrain_idxs, val_idxs = splitter(range(len(flattened_x))) # Splitter returns indices for the two sets\n\n# Create the training and validation data from those indices\nX_train = flattened_x[train_idxs]\ny_train = flattened_y[train_idxs]\n\nX_val = flattened_x[val_idxs]\ny_val = flattened_y[val_idxs]\nAs Jeremy Howard says, getting the data into your model is the trickiest and the most time-consuming part of building a deep learning model. Boy, it was tricky!\nNow that I had the dataset ready, I trained the model.\n\n\nTraining the Model\nI used a simple two-layer neural network to classify the digits. This architecture, while basic, was a good starting point for understanding how deep learning models work.\n\nLinear Layer\nReLU activation Layer\nLinear Layer\nSoftmax Output\n\nSince the task is a classification task with multiple classes, I used cross entropy loss as the loss function to guide training. By using plain softmax as output function, I got NaN values, so I used log softmax for numerical stability.\nFor this model, I had two sets of parameters:\n\nWeights and biases for layer 1, and\nWeights and biases for layer 2\n\nIt’s not a terrible idea to randomly initialize these weights. I defined the functions to implement the functionality for the model’s architecture:\n\nInitializing random weights\nComputing cross entropy loss\nComputing log softmax\nMatrix multiplication for the linear layers\n\ndef init_params(size, std=1.0):\n    \"\"\"Randomly initializes parameters of given size\"\"\"\n    return (torch.randn(size)*std).requires_grad_()\n\ndef linear(xb, weights, bias):\n    \"\"\"Does matrix multiplication with inputs and weights: y = mx + c\"\"\"\n    return xb @ weights + bias\n\ndef log_softmax(logits):\n    max_logits = logits.max(dim=1, keepdim=True).values\n    stable_logits = logits - max_logits  # For numerical stability\n\n    # Compute log-softmax\n    log_probs = stable_logits - torch.log(torch.exp(stable_logits).sum(dim=1, keepdim=True))\n\n    return log_probs\n\ndef cross_entropy_loss(log_probs, yb):\n    yb = yb.squeeze(1)\n    log_probs = log_probs.squeeze(1)\n\n    true_class_log_probs = log_probs[range(len(yb)), yb]\n\n    loss = -true_class_log_probs.mean()\n    return loss\nThen, I used the DataLoaders class in FastAI, which passes the input tensors to the models in batches. I also initialized the model parameters.\n\n# Randomly initialize weights and biases for both the layers\nw1 = init_params((28*28,128))\nb1 = init_params(128)\nw2 = init_params((128,10))\nb2 = init_params(10)\n\ntrain_dataloader = DataLoader(train_dataset, batch_size=256, shuffle=True)\nvalidation_dataloader = DataLoader(validation_dataset, batch_size=256, shuffle=True)\nFinally, the training phase:\n\nepochs = 25 # Train for 25 Epochs\nlearning_rate = 0.001\n\nfor i in range(epochs):\n    for xb, yb in train_dataloader:\n        # Reset gradients that have acccumulated in the last batch\n        if w1.grad is not None:\n            w1.grad.zero_()\n        if b1.grad is not None:\n            b1.grad.zero_()\n        if w2.grad is not None:\n            w2.grad.zero_()\n        if b2.grad is not None:\n            b2.grad.zero_()\n\n        # Forward pass \n        hidden = torch.relu(linear(xb, w1, b1)) # 1st linear + ReLU\n        probabilities = log_softmax(linear(hidden, w2, b2)) # 2nd Linear + softmax\n\n        # Compute loss for the current training batch\n        loss = cross_entropy_loss(probabilities, yb)\n\n        # Backpropagation: use PyTorch functionality to do backpropagation\n        loss.backward()\n\n        # Update weights and biases\n\n        # Update weights and biases\n        with torch.no_grad():\n            w1 -= learning_rate * w1.grad\n            b1 -= learning_rate * b1.grad\n            w2 -= learning_rate * w2.grad\n            b2 -= learning_rate * b2.grad\n\n    # Compute loss on the validation dataset with the same model\n    epoch_loss = 0\n    for xb, yb in validation_dataloader:\n        hidden = torch.relu(linear(xb, w1, b1))\n        probabilities = log_softmax(linear(hidden, w2, b2))\n        loss = cross_entropy_loss(probabilities, yb)\n        epoch_loss += loss.item()\n\n    average_loss = epoch_loss / len(validation_dataloader)\n\n    # Print the loss after each epoch\n    print(f'Epoch [{i+1}/{epochs}], Loss: {average_loss:.4f}')\n\n\nEvaluating the Model\nAfter training, it was time to test the predictions on the test dataset, the moment of truth!\nI performed the same preprocessing steps on the test dataset, as on the training dataset. First, we load the data, then we convert it into a flattened tensor, which we then standardize.\ntesting_path = (path/'testing').ls()\n\nx_test = [ ]\ny_test = [ ]\nfor i in range(10):\n    img_paths = (path/'testing'/str(i)).ls()  # Get the image paths in folder 'i'\n\n    # Load the images and convert to tensors\n\n    x_test.extend([tensor(Image.open(o)) for o in img_paths])\n\n    # Store the corresponding label `i` for all images in this folder\n    y_test.extend([tensor(i)] * len(img_paths))\n\n\nx_test_tensor = torch.stack(x_test).float()/255\ny_test_tensor = torch.tensor(y_test)\n\n# Each image is 28 * 28. So we flatten each image into a single flat tensor of size 784.\nflattened_x_test = x_test_tensor.view(-1, 28*28)\nflattened_y_test = y_test_tensor.unsqueeze(1)\nI used the trained model to compute the predictions, and get the fraction of accurate predictions.\n# Forward pass through the network\nhidden = torch.relu(linear(flattened_x_test, w1, b1))\nprobabilities = log_softmax(linear(hidden, w2, b2))\n\npredicted_classes = torch.argmax(probabilities, dim=1)\n\ncorrect_predictions = (predicted_classes == y_test_tensor).sum().item()\n\n# Calculate the number of incorrect predictions\nincorrect_predictions = len(y_test_tensor) - correct_predictions\n\naccuracy = correct_predictions / len(y_test_tensor) \nprint(f'Accuracy on test dataset: {accuracy * 100:.2f}%')\nThe model achieves about 87% accuracy! For my first model, not bad at all!\n\n\n\nFinal Thoughts\nBuilding this model was much more helpful than simply watching tutorials. There’s a great room for improvement on this model, like increasing the complexity of the model, exploring errors, or trying a different architecture. The possibilities to experiment are endless, and I hope to continue experimenting!\nIf you’re reading this and thinking about building your own first model, it’s worth it! Happy coding! ✌️\nP.S. Take a look at FastAI’s course: Practical Deep Learning for Coders. It’s truly one of a kind!"
  },
  {
    "objectID": "posts/mastering-life-like-a-grandmaster/index.html",
    "href": "posts/mastering-life-like-a-grandmaster/index.html",
    "title": "Mastering Life Like a Grandmaster",
    "section": "",
    "text": "Recently, I came across Vishy Anand’s book- “Mind Master”. For anyone who admires Vishy, and anyone who wants to succeed in life, the book is a delight. Vishy shares his experiences and the lessons he learned from playing chess. In this post, I share the top three lessons from Vishy’s book.\nThose who want to read the book can buy it here.\n1. Don’t Obssess About Your Progress\nIt is important to keep track of your progress, but it’s not at all helpful to obsess over how far you’ve come. Sometimes, it feels like you’re getting nowhere, and then, out of nowhere, situations may change and you may achieve your goals within a week.\nFor Vishy, it took seemingly forever to get his grandmaster norms. He missed out on the norms by the smallest margins- as small as half a point. He got frustrated and impatient. He was so close to achieving a goal he had worked so hard for. Fortunately, he had mentors and friends to support him through the journey. This slump was definitely difficult, but when he did get the norms, he earned all the three within a span of just a year!\nIf you’re feeling like you’re getting nowhere, that’s totally fine! If you’re not finding a job, that’s okay! If you’re finding it hard to master deep learning, that’s also alright! The key is to not obsess over your progress but to be tenacious. Have someone to support you. Who knows, the tides may turn within a week!\n2. What Should You Do After You Achieve Your Goals?\nOnce Vishy realized that he wanted to become a grandmaster, he spent all his energy into the pursuit of achieving that goal. Becoming a grandmaster is what gave his life meaning. But what happened after he became grandmaster?\nVishy says, his life was empty. There was no meaning left once he’d achieved his goal. You may be surprised, but Vishy wasn’t the exception. Most grandmasters feel this way once they become GMs.\nSome of us may be fortunate enough to achieve our goals, but some of us may not be- we may have to quit. Then, it’s all too easy to fall into the trap of despising ourselves for wasting efforts and time. It’s all too easy to not find the purpose of life.\nBut we need to put our trust in time. For Vishy, it took him six months to get back to being excited about life. With time, we will get over this void and move on. But during this time, perhaps we take up a hobby, travel, or do something that we always wanted to do.\n3. Will AI Take My Job?\nFor so long, brilliant chess was solely human feat. Grandmasters in the olden days relied on nothing but their effort and intellect. With time, computers started beating chess players. Now, no chess grandmaster prepares without using a chess engine.\nChess witnessed the rise of AI. Vishy is perhaps the only person to have played in all three eras of chess. He saw what AI can do and how AI can impact us. Of course, Vishy has some advice for all of us.\nWe cannot deny the rise of AI. It’s definitely going to change things. As professionals, it’s up to us to adapt, learn, and unlearn. The way Vishy sees it, his work begins where AI’s work ends. The job of an engine is to study the positions and come up with analyses and conclusions. Once the conclusions are ready, it’s when Vishy’s job starts. He needs to understand why the conclusions make sense and then use those conclusions to enhance his understanding of his game.\nThere’s an open interpretation here- if we want, we can apply the same reasoning to any other field, and not just Chess. Is AI going to take over software developer jobs? It’s definitely going to change them. Those who can adapt can brilliantly make use of AI’s power to do their jobs better.\nRegardless of whether AI takes over or not, it’s certainly our duty to be adaptable. Always be asking ourselves the questions: What do I need to learn? What do I need to unlearn?\n\n\n\nMind Master By Vishy"
  },
  {
    "objectID": "index2.html",
    "href": "index2.html",
    "title": "Vikrant",
    "section": "",
    "text": "Hi, I’m Vikrant."
  },
  {
    "objectID": "posts/creating-http-server-from-scratch/index.html",
    "href": "posts/creating-http-server-from-scratch/index.html",
    "title": "Building an HTTP Server From Scratch",
    "section": "",
    "text": "Running a web server can seem like magic- you type a command fastapi dev main.py or node app.js, and boom, your app is live on a server. But have you ever wondered what’s happening behind the scenes? In this post, we’ll build our own HTTP server from scratch and know what really goes on under the hood!\n\nWhat’s HTTP?\nHTTP is one set of rules (called a protocol) that computers use to talk to each other over the internet. It’s ‘text-based,’ meaning it sends and receives plain text messages. Don’t worry if this doesn’t make sense just yet- by the end of this blog, you’ll know exactly how it works!\n\n\nWhat’s a Server?\nAt its core, a server responds to requests of clients. Think of it like this: a client (like your web browser) asks for something, and the server sends it back. But how do they “talk” to each other? How does the server know what to send?\nTo make this interaction happen, there are two things we need:\n\nThe server needs to listen for and accept connections from clients. Clients will send requests as bytes (just raw data).\nThe server should then figure out what the client wants (like a webpage) and respond with the right data- again, as bytes.\n\nThis is our wishlist for the server. Now, let’s see how we can make this happen:\nTo start, we need a TCP Server. A TCP server listens for requests and ensures that data is sent and received reliably. This will let us connect with clients, the first item in our wishlist. Let’s break this down step by step with code:\n\nImplementing a TCP Server:\nFirst, we need to import the socket library, which is needed to set up the server to accept connections. It’s for handling low-level networking interfaces, which we don’t need to worry ourselves with.\nimport socket\nNow, let’s define a class called TCPServer. This class will set up a server that listens for client connections.\nclass TCPServer:\n    def __init__(self, port=8080) -&gt; None:\n        self.host = \"127.0.0.1\"  # Localhost IP\n        self.port = port  # The port number the server will listen on\nHere, we are specifying that our server will run on localhost (127.0.0.1) on port 8080. The __init__ function initializes our server with these default values.\nTo make our server actually do something, we need to set it up to listen for client requests:\ndef start(self):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind((self.host, self.port))  # Bind the server to the host and port\n    s.listen(5)  # The server can accept up to 5 connections at a time\nWe don’t need to know details of these methods right now. Just know that this code sets up a server that listens for up to 5 client requests at a time. That’s all we need for now!\nOnce the server is listening, we need to accept the connection request from the client and handle it. This is done using accept() and recv() methods. And we need the server to keep listening to incoming requests, so put this in an infinite loop:\nwhile True:\n    conn, addr = s.accept()  # Accept a new connection\n    print(f\"Connection established with {addr}\")\n    data = conn.recv(2048)  # Read data from the client (2KB max)\ns.accept() waits until a client connects. Once connected, it returns two things:\n\nconn: the connection object to communicate with the client.\naddr: the client’s address.\n\nrecv(2048) reads up to 2048 bytes (2 KB) of data sent from the client.\nAt this point, the server is simply waiting for a request from client and accepting the data sent in the request.\nAfter receiving the data, we need to process it and send a response back to the client:\n    response = self.handle_request(data)  # Process the client request\n    conn.sendall(response)  # Send the response back to the client\n    conn.close()  # Close the connection\nhandle_request(data) is a method that we’ll implement later to process the client’s request. This is where we meet the second requirement of the server- understanding what the client wants and sending the response back.\nsendall() sends the response back to the client, and conn.close() closes the connection.\nAnd that’s it! With this setup, our server can accept and respond to client requests.\nHere’s the full version of the code:\nimport socket\n\nclass TCPServer:\n    def __init__(self, port=8080) -&gt; None:\n        self.host = \"127.0.0.1\"\n        self.port = port\n\n    def start(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.bind((self.host, self.port))\n        s.listen(5)\n\n        while True:\n            conn, addr = s.accept()  # Accept new connection\n            print(f\"Connection established with {addr}\")\n            data = conn.recv(2048)  # Receive data from client\n            response = self.handle_request(data)  # Process the request\n            conn.sendall(response)  # Send the response back to the client\n            conn.close()  # Close the connection\n\n    def handle_request(self, data):\n        pass  # To be implemented later\n\n\n\n\nBuilding the HTTP Server\nOkay, so we’ve got our TCP server ready, and it’s time to implement the most important part—the handle_request function. This is where our server takes the request, figures out what the client wants, and then sends back a proper response.\nBut how does the server know what the client wants?\nThe client’s request comes as a stream of bytes. But HTTP is a text-based protocol, meaning that the request can be converted to text and it follows specific rules and formats. So we convert those bytes into strings and parse that string to understand what the client is asking for.\nHTTP requests have a fixed format which we can use to extract information from the request, like:\n\nThe method (e.g., GET or POST)\nThe URI (what page or resource the client wants)\nThe headers (extra info about the request)\nThe body (optional data sent by the client)\n\nNote: Refer to this website to know the structure of HTTP request.\n\nclass HTTPServer(TCPServer):\n    def __init__(self, port=8080) -&gt; None:\n        super().__init__(port)\n\n    def handle_request(self, data):\n        data = data.decode() # convert bytes into string\n        request = self.parse(data)\n\n        self.create_response() # Implemented later\n\n    def parse(self, data:str):\n        \"\"\"\n        This function will parse the HTTP request and return the method, URI, headers, and body.\n        \"\"\"\n        request = {}\n        lines = data.split(\"\\r\\n\")  # Split the request by line\n\n        # First line contains method, URI, and HTTP version\n        request_line = lines[0]\n        words = request_line.split(\" \")\n        request['method'] = words[0]\n\n        if len(words) &gt; 1:\n            # For some requests, URI might be missing (e.g., homepage)\n            request['uri'] = words[1] \n\n        if len(words) &gt; 2:\n            request['http_version'] = words[2]\n\n        # Now let's extract headers and body\n        body = ''\n        in_headers = True\n        request['headers'] = {}\n\n        for line in lines[1:]:\n            if line == '':  # Blank line separates headers from body\n                in_headers = False\n            elif in_headers:\n                key, value = line.split(': ', 1)\n                request['headers'][key] = value\n            else:\n                body += line\n\n        request['body'] = body\n        return request\nWhat’s happening here?\nWe are converting the request into a string first, then we are parsing it using simple string manipulating in Python to extract information like the HTTP method, the URI that the client wants, along with the HTTP request headers and body.\nIf we didn’t know the structure of an HTTP request, we can’t do this string manipulation, and we won’t know what the client wants! But because HTTP has a fixed format (a “protocol”), we can parse the request accurately .\nOnce we know what the client wants, it’s time to respond. But remember, HTTP has format for responses too! We can’t just send plain text back. We have to structure our response according to the HTTP protocol:\n\nA response line (e.g., HTTP/1.1 200 OK)\nThe headers (e.g., server info)\nA blank line (separating headers from the body)\nThe body (the actual content)\n\nHere’s how we can do it:\n\ndef create_response(self, request) :\n    if request['method'] == 'GET' and request['uri'] == '/hi':\n        return hello()\n    elif request['method'] == 'GET' and request['uri'] == '/namaste':\n        return namaste()\n\ndef namaste():\n    response_line = \"HTTP/1.1 200 OK\\r\\n\" \n    response_headers = f\"Server: {socket.gethostname()}\"\n    blank_line = b\"\\r\\n\"\n    response_body = \"Namaste!\"\n\n    # Concatenate everything and return it as bytes\n    return b\"\".join([response_line, response_headers, blank_line, response_body])\n\ndef hello():\n    response_line = \"HTTP/1.1 200 OK\\r\\n\" \n    response_headers = f\"Server: {socket.gethostname()}\"\n    blank_line = b\"\\r\\n\"\n    response_body = \"Hello World!\"\n\n    # Concatenate everything and return it as bytes\n    return b\"\".join([response_line, response_headers, blank_line, response_body])\nHere’s the entire code for the HTTP Server:\n\nclass HTTPServer(TCPServer):\n    def __init__(self, port=8080) -&gt; None:\n        super().__init__(port)\n\n    def handle_request(self, data):\n        data = data.decode() \n        request = self.parse(data)\n\n        self.create_response() \n\n    def parse(self, data:str):\n        \"\"\"\n        This function will parse the HTTP request and return the method, URI, headers, and body.\n        \"\"\"\n        request = {}\n        lines = data.split(\"\\r\\n\") \n        request_line = lines[0]\n        words = request_line.split(\" \")\n        request['method'] = words[0]\n\n        if len(words) &gt; 1:\n            request['uri'] = words[1] \n\n        if len(words) &gt; 2:\n            request['http_version'] = words[2]\n\n        body = ''\n        in_headers = True\n        request['headers'] = {}\n\n        for line in lines[1:]:\n            if line == '':  \n                in_headers = False\n            elif in_headers:\n                key, value = line.split(': ', 1)\n                request['headers'][key] = value\n            else:\n                body += line\n\n        request['body'] = body\n        return request\n\n\n    def create_response(self, request) :\n        if request['method'] == 'GET' and request['uri'] == '/hi':\n            return hello()\n        elif request['method'] == 'GET' and request['uri'] == '/namaste':\n            return namaste()\n\n    def namaste():\n        response_line = \"HTTP/1.1 200 OK\\r\\n\" \n        response_headers = f\"Server: {socket.gethostname()}\"\n        blank_line = b\"\\r\\n\"\n        response_body = \"Namaste!\"\n\n        # Concatenate everything and return it as bytes\n        return b\"\".join([response_line, response_headers, blank_line, response_body])\n\n    def hello():\n        response_line = \"HTTP/1.1 200 OK\\r\\n\" \n        response_headers = f\"Server: {socket.gethostname()}\"\n        blank_line = b\"\\r\\n\"\n        response_body = \"Hello World!\"\n\n        # Concatenate everything and return it as bytes\n        return b\"\".join([response_line, response_headers, blank_line, response_body])\nThis is already a perfectly valid HTTP server! But imagine we had 100s of functions and URI combinations. The if-else conditions will very quickly get messy. But we can make this better! We’ll use a dictionary to map specific requests to their handler functions. This is how modern web frameworks cna handle routes!\n\nroutes = {\n    ('GET', '/hi'): hello,\n    ('GET', '/namaste'): namaste\n}\n\ndef create_response(self, request):\n    # Look up the appropriate function in the routes dictionary\n    handler = routes[(request['method'], request['uri'])]\n    return handler()\nThis is a great improvement. An even better one is if you use decorators. You can add more routes, handle different HTTP methods, or experiment with cookies and sessions. I’ll leave that for you to implement! Now, hopefully, commands like fastapi dev main.py are not magic blackboxes anymore.\nHappy coding!😄\n\n\n\nCredits and Resources:\nTo build this server, I’ve relied on the following resources:\n\nBharat Chauhan Blog\nNeso Academy Course on Networking\nMDN Documentation\nYou can check out this repository for an improved version of the HTTP server we built."
  },
  {
    "objectID": "posts/challenge-accepted/index.html",
    "href": "posts/challenge-accepted/index.html",
    "title": "Challenge Accepted!",
    "section": "",
    "text": "We’d gone to meet the soul of NAMCO Hospital, Shashikant Parakh. He was in a meeting regarding the construction of a Bone Marrow Transplant unit at the hospital.\n Photo with Shashikant Parakh\nI got to hear a few bits and pieces of it. Shashikant, a commerce graduate, was talking with no less depth of knowledge than a medical professional. He talked loud and clear, and never ever drifted away from the topic. A management authority, who himself was a doctor, showed us around the hospital.\nThe hospital was different from other hospitals in many ways. It didn’t have the hospital smell. Instead, it smelled of respect for Shashikant. Its cleanliness was striking and the equipment could’ve easily put to shame the finest of super speciality hospitals. All this for patients who cannot pay for their treatment. All this because of one man — Shashikant.\n\n“I was born and brought up in the religious town of Shirdi, the town of Sai Baba. We were a joint family and owned a small shop of religious goods in front of a temple.”\n\nShirdi was, and still is, the destination of pilgrims. But the thing is that the pilgrims don’t come to visit Shirdi only. There’s a chain of destinations ahead, which is why most of the pilgrims don’t stay in Shirdi for more than half a day. This was a brilliant opportunity to develop a lodging business and it took an innovative young chap, like Shashikant, to recognise this.\n\n“There was a 34-room lodging apartment to be rented in Shirdi. I convinced my family to pay the rent and said I would handle the business. They agreed.”\n\nShashikant started the hotel in three eight-hour shifts. Since the pilgrims didn’t need to stay for the whole day, they preferred Shashikant’s hotel over others. Immediately, it was a huge success.\n\n“The rent was ₹1,11,000 per year, and I managed to earn a sum of 7-8 lakhs in the first year. I was in my first year of college.”\n\nSoon, he’d earned enough to buy another hotel, and soon after, a third one. The business had settled without facing any serious challenges. But was he settled?\nNo! A smooth ride isn’t his type. He likes a roller coaster filled with challenges.\n\n“Once the lodging business had settled, I handed it over to my family and said, ‘You take care of this business and I, am going to Nashik.’”\n\nHe came to Nashik with no riches and no recognition. He would need to build it again. Soon, he started a distribution agency. Once it had settled, he ventured into real estate. Then construction, and then, warehousing. Today, in total, he runs eight businesses, with an annual total turnover of more than a hundred crores, and employs about a hundred people.\n\n“Opportunities kept on coming, and I kept on grabbing them.”\n\nBut a nagging question haunted him: is there an end to all this? And if there’s no end, then why expand the business? He stopped expanding it around 2008-09. Now, it was time to use his entrepreneurial skills to help others. That was the biggest challenge.\n\n“I volunteered at a few places before I was given the opportunity to work at NAMCO charitable hospital.”\n\nWhen I joined, NAMCO was totally deteriorated. The first day after he joined, he called a ‘staff meeting.’\n\n“I said to them, ‘I’m the new secretary here and we are going to transform NAMCO.’ They laughed. They literally laughed and said, ‘We’ve seen a lot of people like you. You just jabber and do nothing.’”\n\nWhen I joined, NAMCO was only treating cancer patients. Bats and rats roamed around. There were only two doctors, both of whom weren’t present most of the time. We had thirty beds, out of which, at maximum, only three were occupied.\nThis was 2015. Fast forward to 2020, and you’ll see an entirely different picture.\n\n“Today, NAMCO is a multi-specialty hospital en route to becoming a super-specialty hospital with state-of-the-art technology at the cheapest rates. There is a staff of 305, out of which, 40 are highly qualified medical professionals. It now has a total of a hundred beds with a few patients always in the waiting.”\n\nStill, Shashikant’s ambitions for NAMCO run quite high, quite literally.\n\n“I’m going to construct a twelve-storey tower with each floor dedicated to each specialty,” he says nonchalantly.\n\nShashikant’s entire life has revolved around one word: challenges. He loves taking up challenges; he thrives when challenged. His life will continue to revolve around that word. He had taken up the biggest challenge of helping others, but he has a wish for a personal challenge as well: Skydiving.\n\n“Skydiving is a dream. I couldn’t do it before, but I will do it soon.”\n\nIt will not be a surprise then, if he takes a jump out of his steady flight, to take up an entirely new challenge, falling fast towards the destination, with sheer determination to glide to safety.\n\nAdvice to the Youth\n\n“Dream big. It’s as simple as that. Ever since my childhood days, I’ve always dreamt of becoming the richest man of my town. Dream big but dream with intensity. Only those dreams come true.”\n\n\n“Keep learning. Be ready to learn. I’ve always had this mindset — whichever field I’ll dabble in, I’ll gain complete knowledge of it. When I started in real estate, I went through a lot of books. When I started working at NAMCO, I studied medical books, which I still do. Have that mindset.”\n\n\n“And be happy. Success is nothing but happiness. Don’t complain. Do whatever you want but be happy.”"
  }
]