[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Vikrant",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nMoney Map\n\n\nMoney Map is a financial tool that lets you run simulations with different inputs and get an approximation of your financial plans.\n\n\n\nOct 18, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/meeting-bhavesh-bhatia/index.html",
    "href": "posts/meeting-bhavesh-bhatia/index.html",
    "title": "A Visionary Leader",
    "section": "",
    "text": "Background\nDad, a schizophrenic, with a minuscule salary of ₹700 per month; mom, a cancer patient; elder brother, deceased from a dog bite reaction; home at a place which was dominated by Naxalite activities, Gondia. With this as his background, came the light of the Bhatia family—Bhavesh.\n Photo With Bhavesh Bhatia\n\n\nHis Story\nBhavesh’s childhood was a continuous struggle. Yet, he had a hankering for adventures.\n\n“मुझे adventures पसंद है। (I love adventures.) In the 8th grade, I made a friend who had an amputated leg. After finishing our 10th grade, we made a trip from our hometown to Kathmandu, Nepal—a distance of 5,620 km—on a bicycle. I had to do the pedalling. He had to do the handling.”\n\nAnd together, they managed their ride. The trip was to make an identity of his own, to prove himself to the world. He did prove himself. He was welcomed like a hero in his hometown.\n\n“गाँवसे २०-३० km बाहर, ४००-५०० लोग welcome करने आए थे। (There were 400-500 people outside my town to welcome me.)”\n\nBut the euphoria of success didn’t last long.\nSoon after returning, his mother was taken seriously ill with stage IV blood cancer.\n\n“घर, ज़मीन, जो भी बचाया था, सब बेच दिया। दोस्तों, रिश्तेदारों से जितना हो सके उतना क़र्ज़ा लिया। (We sold everything we had and took out as much loan as we could for her treatment.) But fate operates on her own accord. We lost her, regardless of our efforts.”\n\nBereft of a great loving support, left alone with a relapsed dad, he was now an unemployed double graduate. This is how Bhavesh’s life stood in the early 1990s.\n\n“माँ चली गयी, पर मैं और daddy बिल्कुल footpath पर आ गए। (Mom left us, but me and dad were on the streets.)”\n\n“I had a master’s degree in Psychology and Economics, yet I was without a job. To be honest, I didn’t want to do a job; I wanted to do business. But what business could I do back then? There was none. I had to find a job. I worked as a telephone operator for a while, 18-20 hours a day for a handful of coins. Later, I got trained as a massage therapist. In fact, I was awarded ‘The Best Massage Therapist in Maharashtra’ award. I worked day and night; I worked till my hands were swollen and somehow managed to save ₹5,000.”\nThese hard-earned ₹5,000 were put to the best use possible.\nBhavesh learned a skill—candle making—a skill that would transform his life. With the ₹5,000, he bought 20 kg of wax and a simple candle die for raw material. Thus, he embarked on his dream of starting a business. His manufacturing unit? A single wooden table. His retail store? A rented handcart. The name registered—Sunrise Candles. The year was 1994 and the place, Mahabaleshwar.\n\n“Back in the day, candles worth thousands of crores were imported from countries like China. Even today, the scenario hasn’t changed much. It was obvious that there was a tremendous opportunity in the candle business, especially in the ‘fancy’ candle business. And Mahabaleshwar, being a tourist destination, played to my advantage.”\n\nBhavesh’s mornings became reserved for manufacturing candles and his evenings, for selling them. He started with plain candles but soon, he was designing fancy candles. Within the first few years, he had created thousands of beautiful designs.\n\n“People used to come to my handcart and fall in love with what I was doing. They would buy a few candles, and then send more people to my handcart. On my handcart came tourists who were specialists in business. They helped me with marketing, packaging, sales, and whatnot. The business grew in this way.”\n\nYet, there was the sword of debt hanging over his head.\n\n“We knew that if we wanted to expand, we had to reach outside Mahabaleshwar. So we started taking part in exhibitions. At one such exhibition, there came a couple who worked at Infosys. It was their wedding anniversary. I gave them a small gift from my side. They were so impressed that they invited me to stay at Infosys for three days and mailed all the 25,000 employees of Infosys to encourage them to buy my products.”\n\nIt’s miraculous what a small act of kindness can do. A ₹60 gift brought in a business of ₹23 lakhs. The whole debt was paid off, with interest.\nBy now, Bhavesh was employing about 30 people. The production was now far exceeding the selling capacity of a handcart. He had to find more places to sell his candles. Again, the tourism value of Mahabaleshwar came to the rescue.\n\n“A few hoteliers were now willing to put up a small selling unit of ours at their hotels. By now, even we’d understood where we should sell the candles, you know, tourist places and such. We put up our stall wherever we got the opportunity and the whole ownership of the stall was given to the guy running it. We could expand even more in this way. More than a thousand corporates are now associated with us including the Taj Group and Grand Hyatt Group.”\n\nHis business now ran smoothly. Yet, the hunger for adventures wouldn’t let him sit still. He took up mountaineering.\n\n“अगर आपको कभी trekking वगैरे करना हो, तो आओ हमारे साथ। (If you want to go on a trek, join us.) I have just finished climbing Kilimanjaro, and my dream is to climb Mount Everest. It’s, like, a real bucket list item.”\n\nWith an annual turnover of more than ₹200 crores, Bhavesh’s company, Sunrise Candles, enlightens more than 70 countries across the globe. It employs more than 10,000 people all over India at its 71 manufacturing units and more than 4,500 selling units.\nGood story, eh? But what is the big deal about Bhavesh Bhatia?\nThe big deal is that he is totally blind.\nBhavesh finished his double degree with the help of his mother who read all his books to him. The institute where he learned candle making was, in fact, the National Association for the Blind, Mumbai (NAB).\nHe was awarded the national award at the hands of the President of India, twice, out of which, one was for being the best employer in the country, which was the best among 58,000 nominations. Out of the 10,000 people he employs, about 9,500 people are blind.\nHe has won a staggering 114 medals in national Paralympics, and still competes for more. As if that wasn’t enough, he became the first-ever blind person to climb Mount Kilimanjaro and aspires to be the first blind person to climb Mount Everest.\nAnd that is a pretty big deal!\n\n\n\nAdvice to the Youth:\n\n“Never tell your destinations where your problems are. Tell your problems where your destinations are.”\n“Success is nothing but being able to sleep well at night. Do whatever you want but never do anything that’ll take away your night’s good sleep.”\n“And don’t wait. Each day is the best day to start doing what you want to do. Just start doing it.”\n\n\nBhavesh sees the world in a way none of us can see. He has a uniquely different perspective on life, a perspective that sits at the far end of the positivity spectrum—something we can emulate. Here’s a story he shared with me that illustrates my point:\n\n“The turning point of my life came when Baba Ramdev hosted a huge shibir of 40-50,000 people in Mahabaleshwar.”\n\n\n“I went there with my friend to see if I could get a cure to my mother’s illness and also, my own. Baba Ramdev was tired telling all these people, “आँखे बंद करो और अंदर झाँको। आँखे बंद करो और अंदर झाँको।” (Close your eyes and peek within, close your eyes and peek within.) Then, I heard an inner voice. It said that these people had to try to close their eyes, and even then, they were failing. And here I was, lucky to have been spared of the trouble. “Treatment तो नही मिला पर मेरा काम हो गया।” (I didn’t get a treatment to our illnesses but I got a cure for my problems.)”"
  },
  {
    "objectID": "posts/how-to-learn-dl/index.html",
    "href": "posts/how-to-learn-dl/index.html",
    "title": "Mastering Deep Learning as a Non-Techie",
    "section": "",
    "text": "Even if you closely follow AI and deep learning, chances are you haven’t heard of Radek Osmulski. He’s a deep learning engineer at Nvidia and a top competitor on Kaggle. But what’s really inspiring about Radek’s story is that he didn’t write a single line of code until he was 29! So how did he go from not knowing how to program to landing a job at Nvidia? How did he master deep learning so well? Radek answers these questions in his book, Meta Learning, which you can buy here.\nIn this blog post, I’ll summarize the key ideas from Meta Learning, so that even if you’re not a technical expert, you can get started and master deep learning yourself.\n\nThe Essential Skills\nYou might think deep learning requires advanced knowledge of statistics, algorithms, data structures, or calculus. But in reality, Radek argues that what you really need are these four skills:\n\nNavigating Stack Overflow: Get familiar with the interface, learn to navigate the site.\nReading documentation: Start with open-source projects—it’s intimidating at first, but it gets easier. By seeing how others code, you’ll improve your own. Take any open-source project in your preferred language and start exploring it.\nUnderstanding code repositories: No matter which one you use, editors have powerful features that make your life easy. Know them!\nUsing version control (Git): Nearly all of the world’s code is managed through Git, so learning how to use basic Git is extremely important. Get started here.\n\nIt sounds simple, right? None of these are deep learning-specific skills, but they are essential for implementing deep learning projects (or any software project, for that matter). If you have these skills, you can build on these to learn anything!\nYou can parallely take FastAI’s deep learning course as well to get familiar with Deep Learning. More on this later.\n\n\nShare Your Work\nYou learn best by doing, but even better by sharing. Sharing isn’t about showing off; it’s about reflecting. If, like me, you’re not someone who posts on social media often, this can be tough. But it’s worth breaking the barrier.\nSharing what you’re learning forces you to reflect, and reflection means deeper understanding. Start a blog, even if it’s just for yourself. Write about what you’re learning, then share it. Remember, you don’t have to be an expert to start writing a blog. Your journey as a beginner is just as important, especially for your own growth.\n\n\nBUILD. BUILD. BUILD.\nOne of the biggest barriers to learning deep learning is there’s just too much theory. You are told that you need to know statistics, calculus, and basic machine learning to just get started with deep learning. Radek’s advice is clear: stop focusing on theory, and start building. It’s better to build first and figure out the theory later. In his words, a better approach is: “Use one cup of theory, one cup of practice. Rinse and repeat.”\nDon’t overdo it with too many courses—pick one. By far, the best course on learning deep learning is the FastAI’s Deep Learning course. In fact, engineers at OpenAI are required to take this course before joining. You can start with this course, build the basics, and get your hands dirty!\n Meta Learning by Radek Osmulski\n\nI claim no credit for the information presented here. All insights are from Radek’s book. My goal was to present a small summary and to absorb the learnings better myself."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Vikrant",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nBuilding an HTTP Server From Scratch\n\n\n\n\n\n\nSoftware Engineering\n\n\n\nServing a web application is as simple as running a single command. But this hides a lot of details, which makes it difficult to understand what’s actually going on. In this post, we create an HTTP server from scratch in Python and build an understanding of these details.\n\n\n\n\n\nOct 27, 2024\n\n\n9 min\n\n\n\n\n\n\n\n\n\n\n\n\nBuilding a Digit Classifier From Scratch\n\n\n\n\n\n\nData Science\n\n\n\nIn this post, I’ll share how I created my first deep learning model. I created a neural network from scratch using FastAI and PyTorch. While I didn’t write code for backpropagation (thankfully, PyTorch is there!), I did write the building blocks myself, which made this incredibly fun!\n\n\n\n\n\nOct 23, 2024\n\n\n8 min\n\n\n\n\n\n\n\n\n\n\n\n\nMastering Deep Learning as a Non-Techie\n\n\n\n\n\n\nData Science\n\n\nPsychology\n\n\n\nHow do you master deep learning, especially if you’re not a ‘techie’? Radek Osmulski did just this. He went from having a boring job to an exciting career at NVidia. This post tells you how.\n\n\n\n\n\nOct 18, 2024\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nA Visionary Leader\n\n\n\n\n\n\nBusiness\n\n\n\nBhavesh Bhatia’s story is nothing short of inspirational. He started with a rented handcart as a store, and built a business employing more than 10,000 people. Read on to know how he did it.\n\n\n\n\n\nOct 15, 2024\n\n\n7 min\n\n\n\n\n\n\n\n\n\n\n\n\nMastering Life Like a Grandmaster\n\n\n\n\n\n\nChess\n\n\nBooks\n\n\n\nVishy Anand, the five-time world champion, is a person who inspires many. His advice, like his chess, is well thought out and worth listening to. Recently, he published his book: “Mind Master: Winning Lessons from a Champion’s life”. Read on to find out what’s Vishy’s take on life.\n\n\n\n\n\nOct 13, 2024\n\n\n4 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Vikrant",
    "section": "",
    "text": "Hi, I’m Vikrant👋. I’m a final-year student at IIT Madras, pursuing a B.S. in Data Science and Applications. I currently work as a Teaching Assistant for the Data Structures and Algorithms (PDSA) course and as a Software Engineering intern at VuNet Systems in Bangalore.\nOutside of academics, I love sports, theatre, and finance. I play chess, tennis, and cricket. I’m an avid reader, and I write about what I read, projects I’m building, or my learning journey.\n\n\nEducation\nIndian Institute of Technology, Madras\nB.S. in Data Science | Sept 2021 - Sept 2025\nH.P.T. Arts College, Nashik\nB.A. in Psychology | June 2018 - June 2021\n\n\n\nExperience\nVuNet Systems, Bangalore\nSoftware Engineering Intern | Oct 2024 - Present\nIIT Madras, Chennai\nTeaching Assistant | June 2024 - Present"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Vikrant",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nBuilding a Digit Classifier From Scratch\n\n\n\n\n\n\nData Science\n\n\n\nIn this post, I’ll share how I created my first deep learning model. I created a neural network from scratch using FastAI and PyTorch. While I didn’t write code for backpropagation (thankfully, PyTorch is there!), I did write the building blocks myself, which made this incredibly fun!\n\n\n\n\n\nOct 23, 2024\n\n\n8 min\n\n\n\n\n\n\n\n\n\n\n\n\nMastering Deep Learning as a Non-Techie\n\n\n\n\n\n\nData Science\n\n\nPsychology\n\n\n\nHow do you master deep learning, especially if you’re not a ‘techie’? Radek Osmulski did just this. He went from having a boring job to an exciting career at NVidia. This post tells you how.\n\n\n\n\n\nOct 18, 2024\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nA Visionary Leader\n\n\n\n\n\n\nBusiness\n\n\n\nBhavesh Bhatia’s story is nothing short of inspirational. He started with a rented handcart as a store, and built a business employing more than 10,000 people. Read on to know how he did it.\n\n\n\n\n\nOct 15, 2024\n\n\n7 min\n\n\n\n\n\n\n\n\n\n\n\n\nMastering Life Like a Grandmaster\n\n\n\n\n\n\nChess\n\n\nBooks\n\n\n\nVishy Anand, the five-time world champion, is a person who inspires many. His advice, like his chess, is well thought out and worth listening to. Recently, he published his book: “Mind Master: Winning Lessons from a Champion’s life”. Read on to find out what’s Vishy’s take on life.\n\n\n\n\n\nOct 13, 2024\n\n\n4 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/first-project-using-fastai/index.html",
    "href": "posts/first-project-using-fastai/index.html",
    "title": "Building a Digit Classifier From Scratch",
    "section": "",
    "text": "This is my first time building a deep learning model from scratch. Before this, I had not tried it, and I wasn’t sure where to start. But thanks to Jeremy Howard’s Practical Deep Learning for Coders course, I gave it a shot and built my first deep learning model- a digit classifier. His course also encouraged me to share what I learn with others.\nIn this blog post, I’ll share how I built a simple neural network using FastAI and PyTorch. I’ll walk through how I prepared the data, built the model, and trained it. I hope my experience helps others who are also trying to build their first model.\n\nLoading the Training Dataset\nAlthough FastAI comes with the MNIST dataset, it needs to be loaded and prepared for training.\nThe data is in the URLs module in fastai library, and it has the following directory structure:\npath/\n├── training/\n│   ├── 0/\n│   │   ├── img1\n│   │   └── img2\n│   ├── 1/\n│   │   ├── img2\n│   │   └── img1\n├── testing/\n│   ├── 0/\n│   │   ├── img1\n│   │   └── img2\n│   ├── 1/\n│   │   ├── img1\n│   │   └── img2\nWe can write a few lines of code to load these images as tensors:\n\npath = untar_data(URLs.MNIST)\nPath.BASE_PATH = path\n\nx = [ ]\ny = [ ]\nfor i in range(10):\n    img_paths = (path/'training'/str(i)).ls()  # Get the image paths of a digit\n\n    # Load the images and convert to tensors\n    x.extend([tensor(Image.open(o)) for o in img_paths])\n\n    # Store the corresponding digit label for all images in this folder\n    y.extend([tensor(i)] * len(img_paths))\n\n\nData Preprocessing\nI now had a \\(28 \\times 28\\) matrix for each image. To pass this as input to the model, I needed to flatten it into a single tensor, and standardize the pixel values for better results.\n# Convert the python list into PyTorch tensor, and standardize it\nx_tensor = torch.stack(x).float()/255\ny_tensor = torch.tensor(y)\n\n# Each image is 28 * 28. So we flatten each image into a single flat tensor of size 784.\nflattened_x = x_tensor.view(-1, 28*28)\nflattened_y = y_tensor.unsqueeze(1) # y_tensor has shape [60000], we unsqueeze it to make it [60000, 1]\nIt’s always a good idea to split the dataset into training and validation sets:\nfrom fastai.data.transforms import RandomSplitter\n\nsplitter = RandomSplitter(valid_pct=0.2, seed=42)  # 80% training, 20% validation\n\ntrain_idxs, val_idxs = splitter(range(len(flattened_x))) # Splitter returns indices for the two sets\n\n# Create the training and validation data from those indices\nX_train = flattened_x[train_idxs]\ny_train = flattened_y[train_idxs]\n\nX_val = flattened_x[val_idxs]\ny_val = flattened_y[val_idxs]\nAs Jeremy Howard says, getting the data into your model is the trickiest and the most time-consuming part of building a deep learning model. Boy, it was tricky!\nNow that I had the dataset ready, I trained the model.\n\n\nTraining the Model\nI used a simple two-layer neural network to classify the digits. This architecture, while basic, was a good starting point for understanding how deep learning models work.\n\nLinear Layer\nReLU activation Layer\nLinear Layer\nSoftmax Output\n\nSince the task is a classification task with multiple classes, I used cross entropy loss as the loss function to guide training. By using plain softmax as output function, I got NaN values, so I used log softmax for numerical stability.\nFor this model, I had two sets of parameters:\n\nWeights and biases for layer 1, and\nWeights and biases for layer 2\n\nIt’s not a terrible idea to randomly initialize these weights. I defined the functions to implement the functionality for the model’s architecture:\n\nInitializing random weights\nComputing cross entropy loss\nComputing log softmax\nMatrix multiplication for the linear layers\n\ndef init_params(size, std=1.0):\n    \"\"\"Randomly initializes parameters of given size\"\"\"\n    return (torch.randn(size)*std).requires_grad_()\n\ndef linear(xb, weights, bias):\n    \"\"\"Does matrix multiplication with inputs and weights: y = mx + c\"\"\"\n    return xb @ weights + bias\n\ndef log_softmax(logits):\n    max_logits = logits.max(dim=1, keepdim=True).values\n    stable_logits = logits - max_logits  # For numerical stability\n\n    # Compute log-softmax\n    log_probs = stable_logits - torch.log(torch.exp(stable_logits).sum(dim=1, keepdim=True))\n\n    return log_probs\n\ndef cross_entropy_loss(log_probs, yb):\n    yb = yb.squeeze(1)\n    log_probs = log_probs.squeeze(1)\n\n    true_class_log_probs = log_probs[range(len(yb)), yb]\n\n    loss = -true_class_log_probs.mean()\n    return loss\nThen, I used the DataLoaders class in FastAI, which passes the input tensors to the models in batches. I also initialized the model parameters.\n\n# Randomly initialize weights and biases for both the layers\nw1 = init_params((28*28,128))\nb1 = init_params(128)\nw2 = init_params((128,10))\nb2 = init_params(10)\n\ntrain_dataloader = DataLoader(train_dataset, batch_size=256, shuffle=True)\nvalidation_dataloader = DataLoader(validation_dataset, batch_size=256, shuffle=True)\nFinally, the training phase:\n\nepochs = 25 # Train for 25 Epochs\nlearning_rate = 0.001\n\nfor i in range(epochs):\n    for xb, yb in train_dataloader:\n        # Reset gradients that have acccumulated in the last batch\n        if w1.grad is not None:\n            w1.grad.zero_()\n        if b1.grad is not None:\n            b1.grad.zero_()\n        if w2.grad is not None:\n            w2.grad.zero_()\n        if b2.grad is not None:\n            b2.grad.zero_()\n\n        # Forward pass \n        hidden = torch.relu(linear(xb, w1, b1)) # 1st linear + ReLU\n        probabilities = log_softmax(linear(hidden, w2, b2)) # 2nd Linear + softmax\n\n        # Compute loss for the current training batch\n        loss = cross_entropy_loss(probabilities, yb)\n\n        # Backpropagation: use PyTorch functionality to do backpropagation\n        loss.backward()\n\n        # Update weights and biases\n\n        # Update weights and biases\n        with torch.no_grad():\n            w1 -= learning_rate * w1.grad\n            b1 -= learning_rate * b1.grad\n            w2 -= learning_rate * w2.grad\n            b2 -= learning_rate * b2.grad\n\n    # Compute loss on the validation dataset with the same model\n    epoch_loss = 0\n    for xb, yb in validation_dataloader:\n        hidden = torch.relu(linear(xb, w1, b1))\n        probabilities = log_softmax(linear(hidden, w2, b2))\n        loss = cross_entropy_loss(probabilities, yb)\n        epoch_loss += loss.item()\n\n    average_loss = epoch_loss / len(validation_dataloader)\n\n    # Print the loss after each epoch\n    print(f'Epoch [{i+1}/{epochs}], Loss: {average_loss:.4f}')\n\n\nEvaluating the Model\nAfter training, it was time to test the predictions on the test dataset, the moment of truth!\nI performed the same preprocessing steps on the test dataset, as on the training dataset. First, we load the data, then we convert it into a flattened tensor, which we then standardize.\ntesting_path = (path/'testing').ls()\n\nx_test = [ ]\ny_test = [ ]\nfor i in range(10):\n    img_paths = (path/'testing'/str(i)).ls()  # Get the image paths in folder 'i'\n\n    # Load the images and convert to tensors\n\n    x_test.extend([tensor(Image.open(o)) for o in img_paths])\n\n    # Store the corresponding label `i` for all images in this folder\n    y_test.extend([tensor(i)] * len(img_paths))\n\n\nx_test_tensor = torch.stack(x_test).float()/255\ny_test_tensor = torch.tensor(y_test)\n\n# Each image is 28 * 28. So we flatten each image into a single flat tensor of size 784.\nflattened_x_test = x_test_tensor.view(-1, 28*28)\nflattened_y_test = y_test_tensor.unsqueeze(1)\nI used the trained model to compute the predictions, and get the fraction of accurate predictions.\n# Forward pass through the network\nhidden = torch.relu(linear(flattened_x_test, w1, b1))\nprobabilities = log_softmax(linear(hidden, w2, b2))\n\npredicted_classes = torch.argmax(probabilities, dim=1)\n\ncorrect_predictions = (predicted_classes == y_test_tensor).sum().item()\n\n# Calculate the number of incorrect predictions\nincorrect_predictions = len(y_test_tensor) - correct_predictions\n\naccuracy = correct_predictions / len(y_test_tensor) \nprint(f'Accuracy on test dataset: {accuracy * 100:.2f}%')\nThe model achieves about 80% accuracy! For my first model, not bad at all!\n\n\n\nFinal Thoughts\nBuilding this model was much more helpful than simply watching tutorials. There’s a great room for improvement on this model, like increasing the complexity of the model, exploring errors, or trying a different architecture. The possibilities to experiment are endless, and I hope to continue experimenting!\nIf you’re reading this and thinking about building your own first model, it’s worth it! Happy coding! ✌️\nP.S. Take a look at FastAI’s course: Practical Deep Learning for Coders. It’s truly one of a kind!"
  },
  {
    "objectID": "posts/mastering-life-like-a-grandmaster/index.html",
    "href": "posts/mastering-life-like-a-grandmaster/index.html",
    "title": "Mastering Life Like a Grandmaster",
    "section": "",
    "text": "Recently, I came across Vishy Anand’s book- “Mind Master”. For anyone who admires Vishy, and anyone who wants to succeed in life, the book is a delight. Vishy shares his experiences and the lessons he learned from playing chess. In this post, I share the top three lessons from Vishy’s book.\nThose who want to read the book can buy it here.\n1. Don’t Obssess About Your Progress\nIt is important to keep track of your progress, but it’s not at all helpful to obsess over how far you’ve come. Sometimes, it feels like you’re getting nowhere, and then, out of nowhere, situations may change and you may achieve your goals within a week.\nFor Vishy, it took seemingly forever to get his grandmaster norms. He missed out on the norms by the smallest margins- as small as half a point. He got frustrated and impatient. He was so close to achieving a goal he had worked so hard for. Fortunately, he had mentors and friends to support him through the journey. This slump was definitely difficult, but when he did get the norms, he earned all the three within a span of just a year!\nIf you’re feeling like you’re getting nowhere, that’s totally fine! If you’re not finding a job, that’s okay! If you’re finding it hard to master deep learning, that’s also alright! The key is to not obsess over your progress but to be tenacious. Have someone to support you. Who knows, the tides may turn within a week!\n2. What Should You Do After You Achieve Your Goals?\nOnce Vishy realized that he wanted to become a grandmaster, he spent all his energy into the pursuit of achieving that goal. Becoming a grandmaster is what gave his life meaning. But what happened after he became grandmaster?\nVishy says, his life was empty. There was no meaning left once he’d achieved his goal. You may be surprised, but Vishy wasn’t the exception. Most grandmasters feel this way once they become GMs.\nSome of us may be fortunate enough to achieve our goals, but some of us may not be- we may have to quit. Then, it’s all too easy to fall into the trap of despising ourselves for wasting efforts and time. It’s all too easy to not find the purpose of life.\nBut we need to put our trust in time. For Vishy, it took him six months to get back to being excited about life. With time, we will get over this void and move on. But during this time, perhaps we take up a hobby, travel, or do something that we always wanted to do.\n3. Will AI Take My Job?\nFor so long, brilliant chess was solely human feat. Grandmasters in the olden days relied on nothing but their effort and intellect. With time, computers started beating chess players. Now, no chess grandmaster prepares without using a chess engine.\nChess witnessed the rise of AI. Vishy is perhaps the only person to have played in all three eras of chess. He saw what AI can do and how AI can impact us. Of course, Vishy has some advice for all of us.\nWe cannot deny the rise of AI. It’s definitely going to change things. As professionals, it’s up to us to adapt, learn, and unlearn. The way Vishy sees it, his work begins where AI’s work ends. The job of an engine is to study the positions and come up with analyses and conclusions. Once the conclusions are ready, it’s when Vishy’s job starts. He needs to understand why the conclusions make sense and then use those conclusions to enhance his understanding of his game.\nThere’s an open interpretation here- if we want, we can apply the same reasoning to any other field, and not just Chess. Is AI going to take over software developer jobs? It’s definitely going to change them. Those who can adapt can brilliantly make use of AI’s power to do their jobs better.\nRegardless of whether AI takes over or not, it’s certainly our duty to be adaptable. Always be asking ourselves the questions: What do I need to learn? What do I need to unlearn?\n\n\n\nMind Master By Vishy"
  },
  {
    "objectID": "index2.html",
    "href": "index2.html",
    "title": "Vikrant",
    "section": "",
    "text": "Hi, I’m Vikrant."
  },
  {
    "objectID": "posts/creating-http-server-from-scratch/index.html",
    "href": "posts/creating-http-server-from-scratch/index.html",
    "title": "Building an HTTP Server From Scratch",
    "section": "",
    "text": "Starting a web server is as simple as running a single command like: fastapi dev main.py or node app.js. But this hides a lot of what goes on internally. Under the hood, there’s a lot going on. Let’s build our own HTTP server from scratch, and see those details!\n\nWhat’s HTTP?\nHTTP is a text-based application layer protocol. A protocol is like a set of rules that both computers follow when talking to each other. For example, HTTP is a ‘text-based’ protocol, meaning it sends and receives plain text. Understanding the terms “protocol” and “text-based” is much easier when we actually implement it, so don’t worry if you don’t fully get it just yet.\n\n\nBuilding the Server:\nServer essentially serves files. A client machine requests a file from the server, and the server gives back this file to the client. For this communication to happen, there needs to be first a connection between client and server. Then, there needs to be a way by which the server understands what the client wants and responds with it.\nWe can define our wishlist for the server as follows:\n\nAccept connection requests from clients.Client will send requests as bytes.\nServer should try to understand the client request, and return a response as bytes based on the client request.\n\nTo satisfy the first item in our wishlist, we’ll create a TCP server that accepts connections from client. This server will have a function handle_request to process the client request and return a response.\nTCP Server:\nFor internet communication, we need a TCP Server. This server listens for requests from clients, and ensures that the connection is reliable. TCP guarantees that information won’t be lost in between communication, unlike video streaming protocols that allow some data loss.\n\nThe request from the client is just raw data (bytes). The client sends bytes as request and the server also responds with bytes.\nIn Python, we can use the socket library to build this TCP server:\nimport socket\n\nclass TCPServer:\n    def __init__(self, port=8080) -&gt; None:\n        self.host = \"127.0.0.1\"\n        self.port = port  \n\n    # Wishlist item 1: accept connections from clients, and accept requests\n    def start(self):\n        \"\"\"\n        Start the TCP server, bind it to the specified host and port, and listen for incoming connections.\n        \"\"\"\n        # Create a new socket using IPv4 (AF_INET) and TCP (SOCK_STREAM)\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        \n        # Bind the socket to the provided host and port. This bounded socket is like a unique address \n        # for an application on the internet. \n        s.bind((self.host, self.port))\n        \n        # Start listening for incoming connections with a backlog of 5\n        s.listen(5)\n\n        while True:\n            # Accept a new connection\n            conn, addr = s.accept()\n\n            # Read data from the client (up to 2048 bytes)\n            data = conn.recv(2048)\n\n            # Process the client request and generate a response\n            response = self.handle_request(data)\n\n            # Send the response back to the client and then close the connection \n            conn.sendall(response)\n\n            conn.close()\n\n    # Wishlist Item 2: trying to make sense of the request and returning a response\n    def handle_request(self, data):\n        pass\nNow we need to implement the handle_request function. How can the server understand what the client wants and return an appropriate response? The incoming request is a stream of bytes. But remember HTTP was text-based? We can convert those bytes into string and process this string.\n\nclass HTTPServer(TCPServer):\n    def __init__(self, port=8080) -&gt; None:\n        super().__init__(port)\n\n    def handle_request(self, data):\n        request = data.decode() # convert bytes into string\n\n    def parse(self, data:str):\n        \"\"\"\n        Refer to this website to know the structure of HTTP:\n            https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#http_requests\n        \n        Given an HTTP text request, parse the method, uri, headers and body of the request.\n        \"\"\"\n        \n        request = { }\n        lines = data.split(\"\\r\\n\")\n\n        # First line of the request is always the method, URI, and HTTP version\n        request_line = lines[0]\n        words = request_line.split(\" \")\n        request['method'] = words[0]\n\n        if len(words) &gt; 1:\n            # we put this in an if-block because sometimes \n            # browsers don't send uri for homepage\n            request['uri'] = words[1] # call decode to convert bytes to str\n\n        if len(words) &gt; 2:\n            request['http_version'] = words[2]\n\n        # After the first line, we have the headers and request body. Each header is a key-value \n        # pair separated by a colon. \n        body = ''\n        in_headers = True\n        \n        request['headers'] = { }\n\n        for line in lines[1:]:\n            # Headers and body are separated by blank line. Check for it\n            if line == '':\n                in_headers = False\n            elif in_headers:\n                key, value = line.split(': ', 1)\n                request['headers'][key] = value\n            else:\n                body += line\n\n        request['body'] = body\n        return request\nFor the parse function to work well, we need to know the structure of the request. If we didn’t know the structure of an HTTP request, it would be extremely difficult and inaccurate to process requests. But because HTTP has a fixed structure, we can parse the request accurately. This is what we mean when we say protocol. Protocol is a fixed set of rules for communication between two machines. Now, we can get back to the definition of HTTP: “a text-based web protocol”. HTTP is text-based because we’re just processing plain strings, and HTTP is protocol because it defines certain rules about communication, such as a fixed format.\nBy parsing the request, we can convert the HTTP request string into a python object. Based on what the client is requesting, we can define functions to handle the requests. But note: if we want to truly create an HTTP server, we need to return a response that also follows HTTP. We can’t simply return any value!\nHere’s how we can do it:\n\ndef create_response(self, request) :\n    if request['method'] == 'GET' and request['uri'] == '/hi':\n        return hello()\n    elif request['method'] == 'GET' and request['uri'] == '/namaste':\n        return namaste()\n\ndef namaste():\n    response_line = \"HTTP/1.1 200 OK\\r\\n\" \n    response_headers = f\"Server: {socket.gethostname()}\"\n    blank_line = b\"\\r\\n\"\n    response_body = \"Namaste!\"\n\n    # Concatenate everything and return it as bytes\n    return b\"\".join([response_line, response_headers, blank_line, response_body])\ndef hello():\n    response_line = \"HTTP/1.1 200 OK\\r\\n\" \n    response_headers = f\"Server: {socket.gethostname()}\"\n    blank_line = b\"\\r\\n\"\n    response_body = \"Hello World!\"\n\n    # Concatenate everything and return it as bytes\n    return b\"\".join([response_line, response_headers, blank_line, response_body])\nIt’s messy, but we can make it better! We can define a dictionary to store (method, uri) as keys and the corresponding functions to call, like this:\n\nroutes[('GET', '/hi')] = hello\nroutes[('GET', '/namaste')] = namaste\nThen we can use the dictionary instead of if-else conditions. To further improve this, we can define and use a decorator. If you’ve used flask or FastAPI, this is exactly what we do with: @app.route().\nAnd, the best part is that this is infinitely customizable! We can have as many endpoints as we want and as many handlers as we want. I’ll leave that for you to experiment with. You can try to implement sessions, cookies, or concurrent handling of requests.\nYou can check out this repository and the resources listed below for inspiration. Happy coding!\n\n\n\nCredits\nTo build this server, I’ve relied on the following resources:\n\nBharat Chauhan Blog\nNeso Academy Course on Networking\nMDN Documentation"
  }
]